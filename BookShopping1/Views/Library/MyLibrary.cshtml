<head>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
</head>
<div class="container my-5">
    <h2>My Library</h2>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success">
            @TempData["SuccessMessage"]
        </div>
    }

    <div class="row mt-4">
        @foreach (var book in Model)
        {
            <div class="col-md-6 col-lg-4 mb-4" id="book-@book.Id">
                <div class="card h-100 shadow-lg border-0 rounded-lg">
                    <div class="position-relative">
                        <img src="@(!string.IsNullOrEmpty(book.Imaget) ? $"/imaget/{book.Imaget}" : "/imaget/default.jpg")" class="card-img-top" alt="@book.BookName" style="height: 300px; object-fit: cover;">
                    </div>
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title text-primary">@book.BookName</h5>
                        <p class="card-text mb-4">
                            <b>Author:</b> @book.AuthorName <br />
                            <b>Publisher:</b> @book.Publisher <br />
                            <b>Year:</b> @book.YearOfPublishing <br />

                            @if (book.IsBorrowed && book.BorrowedBy == User.Identity.Name)
                            {
                                <span class="badge bg-warning text-dark">Borrowed</span>
                                <br />
                                <b>Return time:</b> @book.DueDate <br />
                            }
                        </p>
                        <div class="mt-auto">
                            <div class="d-flex flex-wrap gap-2 justify-content-start">
                                <!-- Download buttons with icons -->
                                @if (!string.IsNullOrEmpty(book.PdfFilePath))
                                {
                                    <a href="@Url.Action("DownloadBook", "Library", new { id = book.Id, format = "pdf" })" class="btn btn-primary square-btn" title="Download the book in PDF format">
                                        <i class="fa fa-file-pdf"></i> Download PDF
                                    </a>
                                }
                                @if (!string.IsNullOrEmpty(book.EpubFilePath))
                                {
                                    <a href="@Url.Action("DownloadBook", "Library", new { id = book.Id, format = "epub" })" class="btn btn-primary square-btn" title="Download the book in ePub format">
                                        <i class="fa fa-book-open"></i> Download ePub
                                    </a>
                                }
                                @if (!string.IsNullOrEmpty(book.F2bFilePath))
                                {
                                    <a href="@Url.Action("DownloadBook", "Library", new { id = book.Id, format = "fb2" })" class="btn btn-primary square-btn" title="Download the book in Fb2 format">
                                        <i class="fa fa-book-reader"></i> Download Fb2
                                    </a>
                                }
                                @if (!string.IsNullOrEmpty(book.MobiFilePath))
                                {
                                    <a href="@Url.Action("DownloadBook", "Library", new { id = book.Id, format = "mobi" })" class="btn btn-primary square-btn" title="Download the book in Mobi format (for Kindle)">
                                        <i class="fa fa-mobile-alt"></i> Download Mobi
                                    </a>
                                }

                                <!-- Give Feedback Button with icon -->
                                <a href="@Url.Action("GiveFeedback", "Feedback", new { bookId = book.Id })" class="btn btn-secondary square-btn" title="Give feedback on this book">
                                    <i class="fa fa-comment-dots"></i> Give Feedback
                                </a>

                                <!-- Check if the book is borrowed or bought -->
                                @if (book.IsBorrowed && book.BorrowedBy == User.Identity.Name)
                                {
                                    <button type="button" class="btn btn-danger square-btn" onclick="returnBook(@book.Id)" title="Return the borrowed book">
                                        <i class="fa fa-undo"></i> Return Book
                                    </button>
                                }
                                else if (!book.IsBorrowed)
                                {
                                    <button type="button" class="btn btn-danger square-btn" onclick="deleteBook(@book.Id)" title="Delete this book from your library">
                                        <i class="fa fa-trash-alt"></i> Delete Book
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        async function returnBook(bookId) {
            console.log("Return clicked for bookId:", bookId);

            try {
                // Send the return request to the server
                const response = await fetch(`/Library/ReturnBook`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ bookId })
                });

                // Parse the server response
                const result = await response.json();

                if (response.ok) {
                    // Show success message and reload the page
                    alert(result.message || "Book returned successfully.");
                    location.reload();
                } else {
                    // Show error message if returning fails
                    alert(result.message || "Error returning the book. Please try again.");
                }
            } catch (error) {
                console.error("Error returning the book:", error);
                alert("An unexpected error occurred. Please try again.");
            }
        }

        async function deleteBook(bookId) {
            if (!confirm("Are you sure you want to delete this book from your library?")) {
                return;
            }

            try {
                const response = await fetch('/Library/DeleteBook', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ bookId })
                });

                const result = await response.json();

                if (response.ok) {
                    alert(result.message);
                    // Remove the book card from the DOM
                    document.getElementById(`book-${bookId}`).remove();
                } else {
                    alert(result.message);
                }
            } catch (error) {
                console.error('Error deleting book:', error);
                alert('An unexpected error occurred. Please try again.');
            }
        }
    </script>
}

<style>
    .btn i {
        font-size: 20px;
        margin-right: 8px; /* Margin between icon and text */
    }

    .square-btn {
        width: 150px;
        padding: 10px;
        display: flex;
        justify-content: center;
        align-items: center;
        border-radius: 5px;
        font-size: 12px; /* Adjust the text size */
        text-align: center;
    }

    .card-body {
        display: flex;
        flex-direction: column;
        align-items: start;
    }

    .card-text {
        margin-bottom: 10px;
    }

    /* Button container (for buttons beside the author) */
    .d-flex {
        gap: 10px;
        flex-wrap: wrap;
        justify-content: start; /* Align buttons to the left */
    }
</style>
